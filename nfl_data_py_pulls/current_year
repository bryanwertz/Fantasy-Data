%pip install nfl_data_py

# nfl_data_py documentation https://pypi.org/project/nfl-data-py/

import nfl_data_py as nfl
import pandas as pd

# set up lists and column filters

current_year = [2022]
hist_years = list(range(2012, max(current_year)))
total_years = list(range(2012, max(current_year)+1))

pbp_columns = ['play_id', 'posteam', 'defteam', 'week', 'yardline_100', 'ydstogo', 'play_type',
               'yards_gained', 'qb_kneel', 'qb_spike', 'two_point_conv_result', 'td_team',
               'td_player_name', 'td_player_id', 'interception', 'fumble_forced', 'fumble_not_forced',
               'fumble_lost', 'rush_attempt', 'pass_attempt', 'touchdown', 'pass_touchdown',
               'rush_touchdown', 'return_touchdown', 'two_point_attempt', 'fumble', 'complete_pass',
               'passing_yards', 'receiving_yards', 'rushing_yards', 'fumbled_1_team',
               'fumbled_1_player_id', 'fumbled_1_player_name', 'fumbled_2_player_id',
               'fumbled_2_player_name', 'fumbled_2_team', 'season', 'passer', 'rusher',
               'receiver', 'pass', 'rush', 'play', 'passer_id', 'rusher_id', 'receiver_id']

# Was planning to pull the following, but not available for 2021 for some reason ['punt_reterner_player_id', 'punt_returner_player_name','kickoff_returner_player_id', 'kickoff_returner_player_name']

# There are some duplicate columns for player names and ID's, after cursory look they seem to be identical. Alt below has the other set of player columns.
alt_pbp_columns = ['play_id', 'week', 'yardline_100', 'ydstogo', 'play_type', 'yards_gained',
                   'qb_kneel', 'qb_spike', 'two_point_conv_result', 'td_team', 'td_player_name',
                   'td_player_id', 'interception', 'fumble_forced', 'fumble_not_forced', 'fumble_lost',
                   'rush_attempt', 'pass_attempt', 'touchdown', 'pass_touchdown', 'rush_touchdown',
                   'return_touchdown', 'two_point_attempt', 'fumble', 'complete_pass',
                   'passer_player_id', 'passer_player_name', 'passing_yards', 'receiver_player_id',
                   'receiver_player_name', 'receiving_yards', 'rusher_player_id', 'rusher_player_name',
                   'rushing_yards', 'fumbled_1_team', 'fumbled_1_player_id', 'fumbled_1_player_name',
                   'fumbled_2_player_id', 'fumbled_2_player_name', 'fumbled_2_team', 'season', 'pass',
                   'rush', 'play']

weekly_columns = ['player_id', 'player_name', 'recent_team', 'season', 'week', 'season_type',
                  'completions', 'attempts', 'passing_yards', 'passing_tds', 'interceptions',
                  'sack_fumbles', 'sack_fumbles_lost', 'passing_2pt_conversions', 
                  'carries', 'rushing_yards', 'rushing_tds', 'rushing_fumbles',
                  'rushing_fumbles_lost', 'rushing_2pt_conversions', 'receptions', 'targets',
                  'receiving_yards', 'receiving_tds', 'receiving_fumbles', 'receiving_fumbles_lost',
                  'receiving_2pt_conversions', 'special_teams_tds']

season_columns = ['player_id', 'season', 'season_type', 'completions', 'attempts', 'passing_yards',
                  'passing_tds', 'interceptions', 'sack_fumbles', 'sack_fumbles_lost',
                  'passing_2pt_conversions', 'carries', 'rushing_yards', 'rushing_tds',
                  'rushing_fumbles', 'rushing_fumbles_lost', 'rushing_2pt_conversions',
                  'receptions', 'targets', 'receiving_yards', 'receiving_tds', 'receiving_fumbles',
                  'receiving_fumbles_lost', 'receiving_2pt_conversions', 'target_share',
                  'special_teams_tds', 'games']

position_list = ['QB', 'RB', 'WR', 'TE', 'FB']


# Weekly or dynamic data pulls, run daily or weekly

# 2022 to-date play by play data
pbp_df = nfl.import_pbp_data(current_year, pbp_columns, downcast=True)

# 2022 to-date weekly stat data
weekly_df = nfl.import_weekly_data(current_year, weekly_columns, downcast=True)

weekly_df['fumbles'] = weekly_df['rushing_fumbles'] + weekly_df['receiving_fumbles'] + weekly_df['sack_fumbles']
weekly_df['fumbles_lost'] = weekly_df['rushing_fumbles_lost'] + weekly_df['receiving_fumbles_lost'] + weekly_df['sack_fumbles_lost']
weekly_df['lambda_fantasy_points'] = (
    weekly_df['receptions']*lambda_scoring_weights['receptions'] + weekly_df['receiving_yards']*lambda_scoring_weights['receiving_yds']+
    weekly_df['receiving_tds']*lambda_scoring_weights['receiving_td'] + weekly_df['fumbles_lost']*lambda_scoring_weights['fumbles_lost']+
    weekly_df['rushing_yards']*lambda_scoring_weights['rushing_yds']+weekly_df['rushing_tds']*lambda_scoring_weights['rushing_td']+
    weekly_df['passing_yards']*lambda_scoring_weights['passing_yds']+weekly_df['passing_tds']*lambda_scoring_weights['passing_td']+
    weekly_df['interceptions']*lambda_scoring_weights['int'] +weekly_df['special_teams_tds']*lambda_scoring_weights['st_td'] )

# add position label from id_df
merge_id_df = id_df[['gsis_id', 'name', 'position']].rename(columns={'gsis_id': 'player_id'})
weekly_df = weekly_df.merge(merge_id_df, how='left', on='player_id').drop(columns='name', axis = 1).loc[weekly_df['season_type'] == 'REG']

weekly_df['pos_rank'] = weekly_df.groupby(['position','season', 'week'])['lambda_fantasy_points'].rank(method = 'min', ascending = False).astype(int)
weekly_df['pos_rank_label'] = weekly_df['position'] + weekly_df['pos_rank'].astype(str)

weekly_df['pos_tier'] = weekly_df['pos_rank'] / pos_tier_size
weekly_df['pos_tier'] = weekly_df['pos_tier'].apply(np.ceil).astype(int)
weekly_df['pos_tier_label'] = weekly_df['position'] + weekly_df['pos_tier'].astype(str)


# 2022 to-date seasonal stat data
season_df = nfl.import_seasonal_data(current_year)
season_df = season_df[season_columns]

season_df['fumbles'] = season_df['rushing_fumbles'] + season_df['receiving_fumbles'] + season_df['sack_fumbles']
season_df['fumbles_lost'] = season_df['rushing_fumbles_lost'] + season_df['receiving_fumbles_lost'] + season_df['sack_fumbles_lost']
season_df['lambda_fantasy_points'] = (
    season_df['receptions']*lambda_scoring_weights['receptions'] + season_df['receiving_yards']*lambda_scoring_weights['receiving_yds']+
    season_df['receiving_tds']*lambda_scoring_weights['receiving_td'] + season_df['fumbles_lost']*lambda_scoring_weights['fumbles_lost']+
    season_df['rushing_yards']*lambda_scoring_weights['rushing_yds']+season_df['rushing_tds']*lambda_scoring_weights['rushing_td']+
    season_df['passing_yards']*lambda_scoring_weights['passing_yds']+season_df['passing_tds']*lambda_scoring_weights['passing_td']+
    season_df['interceptions']*lambda_scoring_weights['int'] +season_df['special_teams_tds']*lambda_scoring_weights['st_td'] )

# add position label from id_df
merge_id_df = id_df[['gsis_id', 'name', 'position']].rename(columns={'gsis_id': 'player_id'})
season_df = season_df.merge(merge_id_df, how='left', on='player_id').drop(columns='name', axis = 1).loc[season_df['season_type'] == 'REG']

season_df['pos_rank'] = season_df.groupby(['position','season'])['lambda_fantasy_points'].rank(method = 'min', ascending = False).astype(int)
season_df['pos_rank_label'] = season_df['position'] + season_df['pos_rank'].astype(str)

season_df['pos_tier'] = season_df['pos_rank'] / pos_tier_size
season_df['pos_tier'] = season_df['pos_tier'].apply(np.ceil).astype(int)
season_df['pos_tier_label'] = season_df['position'] + season_df['pos_tier'].astype(str)

# calculate per-game metrics

for col in per_game_cols:
  column_name = str(col+'/g')
  season_df[column_name] = season_df[col]/season_df['games']


# 2022 to-date snap data
snap_df = nfl.import_snap_counts(current_year)
snap_df = snap_df.loc[snap_df['position'].isin(position_list)].replace({
    'position': {
        'FB': 'RB'
    }
})
