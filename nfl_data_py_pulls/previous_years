%pip install nfl_data_py

# nfl_data_py documentation https://pypi.org/project/nfl-data-py/

import nfl_data_py as nfl
import pandas as pd

# set up lists and column filters

current_year = [2022]
hist_years = list(range(2012, max(current_year)))
total_years = list(range(2012, max(current_year)+1))

pbp_columns = ['play_id', 'posteam', 'defteam', 'week', 'yardline_100', 'ydstogo', 'play_type',
               'yards_gained', 'qb_kneel', 'qb_spike', 'two_point_conv_result', 'td_team',
               'td_player_name', 'td_player_id', 'interception', 'fumble_forced', 'fumble_not_forced',
               'fumble_lost', 'rush_attempt', 'pass_attempt', 'touchdown', 'pass_touchdown',
               'rush_touchdown', 'return_touchdown', 'two_point_attempt', 'fumble', 'complete_pass',
               'passing_yards', 'receiving_yards', 'rushing_yards', 'fumbled_1_team',
               'fumbled_1_player_id', 'fumbled_1_player_name', 'fumbled_2_player_id',
               'fumbled_2_player_name', 'fumbled_2_team', 'season', 'passer', 'rusher',
               'receiver', 'pass', 'rush', 'play', 'passer_id', 'rusher_id', 'receiver_id']

# Was planning to pull the following, but not available for 2021 for some reason ['punt_reterner_player_id', 'punt_returner_player_name','kickoff_returner_player_id', 'kickoff_returner_player_name']

# There are some duplicate columns for player names and ID's, after cursory look they seem to be identical. Alt below has the other set of player columns.
alt_pbp_columns = ['play_id', 'week', 'yardline_100', 'ydstogo', 'play_type', 'yards_gained',
                   'qb_kneel', 'qb_spike', 'two_point_conv_result', 'td_team', 'td_player_name',
                   'td_player_id', 'interception', 'fumble_forced', 'fumble_not_forced', 'fumble_lost',
                   'rush_attempt', 'pass_attempt', 'touchdown', 'pass_touchdown', 'rush_touchdown',
                   'return_touchdown', 'two_point_attempt', 'fumble', 'complete_pass',
                   'passer_player_id', 'passer_player_name', 'passing_yards', 'receiver_player_id',
                   'receiver_player_name', 'receiving_yards', 'rusher_player_id', 'rusher_player_name',
                   'rushing_yards', 'fumbled_1_team', 'fumbled_1_player_id', 'fumbled_1_player_name',
                   'fumbled_2_player_id', 'fumbled_2_player_name', 'fumbled_2_team', 'season', 'pass',
                   'rush', 'play']

weekly_columns = ['player_id', 'player_name', 'recent_team', 'season', 'week', 'season_type',
                  'completions', 'attempts', 'passing_yards', 'passing_tds', 'interceptions',
                  'sack_fumbles', 'sack_fumbles_lost', 'passing_2pt_conversions', 
                  'carries', 'rushing_yards', 'rushing_tds', 'rushing_fumbles',
                  'rushing_fumbles_lost', 'rushing_2pt_conversions', 'receptions', 'targets',
                  'receiving_yards', 'receiving_tds', 'receiving_fumbles', 'receiving_fumbles_lost',
                  'receiving_2pt_conversions', 'special_teams_tds']

season_columns = ['player_id', 'season', 'season_type', 'completions', 'attempts', 'passing_yards',
                  'passing_tds', 'interceptions', 'sack_fumbles', 'sack_fumbles_lost',
                  'passing_2pt_conversions', 'carries', 'rushing_yards', 'rushing_tds',
                  'rushing_fumbles', 'rushing_fumbles_lost', 'rushing_2pt_conversions',
                  'receptions', 'targets', 'receiving_yards', 'receiving_tds', 'receiving_fumbles',
                  'receiving_fumbles_lost', 'receiving_2pt_conversions', 'target_share',
                  'special_teams_tds', 'games']

position_list = ['QB', 'RB', 'WR', 'TE', 'FB']

lambda_scoring_weights = {
    'receptions': 0.5, #1/2 PPR
    'receiving_yds': 0.1,
    'receiving_td': 6,
    'fumbles_lost': -2,
    'rushing_yds': 0.1,
    'rushing_td': 6,
    'passing_yds': 0.04,
    'passing_td': 4,
    'int': -2,
    'st_td': 6
}

pos_tier_size = 12

per_game_cols = ['completions', 'attempts', 'passing_yards', 'passing_tds', 'interceptions',  'passing_2pt_conversions',
                 'carries', 'rushing_yards', 'rushing_tds', 'rushing_2pt_conversions', 'receptions', 'targets', 'receiving_yards',
                 'receiving_tds', 'receiving_2pt_conversions', 'special_teams_tds','fumbles', 'fumbles_lost', 
                 'lambda_fantasy_points', 'offense_snaps']


# Historical or static data pulls, only need to run once per year

# player id and defining data, gsis is the player_id key number
id_df = nfl.import_ids()

# 2012 - 2022 schedule data
schedule_df = nfl.import_schedules(total_years)

# 2012 - 2021 play by play data
hist_pbp_df = nfl.import_pbp_data(hist_years, pbp_columns, downcast=True)

# 2012 - 2021 snap data
hist_snap_df = nfl.import_snap_counts(hist_years)
hist_snap_df = hist_snap_df.loc[hist_snap_df['position'].isin(position_list)].replace({
    'position': {
        'FB': 'RB'
    }
})
hist_snap_df = hist_snap_df.rename(columns={'pfr_player_id': 'pfr_id'})

# 2012 - 2021 weekly stat data

hist_weekly_df = nfl.import_weekly_data(hist_years, weekly_columns, downcast=True)

hist_weekly_df['fumbles'] = hist_weekly_df['rushing_fumbles'] + hist_weekly_df['receiving_fumbles'] + hist_weekly_df['sack_fumbles']
hist_weekly_df['fumbles_lost'] = hist_weekly_df['rushing_fumbles_lost'] + hist_weekly_df['receiving_fumbles_lost'] + hist_weekly_df['sack_fumbles_lost']
hist_weekly_df['lambda_fantasy_points'] = (
    hist_weekly_df['receptions']*lambda_scoring_weights['receptions'] + hist_weekly_df['receiving_yards']*lambda_scoring_weights['receiving_yds']+
    hist_weekly_df['receiving_tds']*lambda_scoring_weights['receiving_td'] + hist_weekly_df['fumbles_lost']*lambda_scoring_weights['fumbles_lost']+
    hist_weekly_df['rushing_yards']*lambda_scoring_weights['rushing_yds']+hist_weekly_df['rushing_tds']*lambda_scoring_weights['rushing_td']+
    hist_weekly_df['passing_yards']*lambda_scoring_weights['passing_yds']+hist_weekly_df['passing_tds']*lambda_scoring_weights['passing_td']+
    hist_weekly_df['interceptions']*lambda_scoring_weights['int'] +hist_weekly_df['special_teams_tds']*lambda_scoring_weights['st_td'] )

# add other id's from id_df
merge_id_df = id_df[['gsis_id', 'pfr_id', 'name']].rename(columns={'gsis_id': 'player_id'})
hist_weekly_df = hist_weekly_df.merge(merge_id_df, how='left', on='player_id')
hist_weekly_df = hist_weekly_df.loc[hist_weekly_df['season_type'] == 'REG']

# add snaps, drop unneeded columns
hist_weekly_df = hist_weekly_df.merge(hist_snap_df, how='left', on=['season', 'week', 'pfr_id'])
hist_weekly_df = hist_weekly_df.drop(columns=['name', 'game_type', 'team', 'defense_snaps', 'defense_pct', 'st_snaps', 'st_pct'])

# calculate positional ranks and tiers
hist_weekly_df['pos_rank'] = hist_weekly_df.groupby(['position','season', 'week'])['lambda_fantasy_points'].rank(method = 'min', ascending = False).astype(int)
hist_weekly_df['pos_rank_label'] = hist_weekly_df['position'] + hist_weekly_df['pos_rank'].astype(str)

hist_weekly_df['pos_tier'] = hist_weekly_df['pos_rank'] / pos_tier_size
hist_weekly_df['pos_tier'] = hist_weekly_df['pos_tier'].apply(np.ceil).astype(int)
hist_weekly_df['pos_tier_label'] = hist_weekly_df['position'] + hist_weekly_df['pos_tier'].astype(str)


# 2012 - 2021 seasonal stat data
hist_season_df = nfl.import_seasonal_data(hist_years)
hist_season_df = hist_season_df[season_columns]

hist_season_df['fumbles'] = hist_season_df['rushing_fumbles'] + hist_season_df['receiving_fumbles'] + hist_season_df['sack_fumbles']
hist_season_df['fumbles_lost'] = hist_season_df['rushing_fumbles_lost'] + hist_season_df['receiving_fumbles_lost'] + hist_season_df['sack_fumbles_lost']
hist_season_df['lambda_fantasy_points'] = (
    hist_season_df['receptions']*lambda_scoring_weights['receptions'] + hist_season_df['receiving_yards']*lambda_scoring_weights['receiving_yds']+
    hist_season_df['receiving_tds']*lambda_scoring_weights['receiving_td'] + hist_season_df['fumbles_lost']*lambda_scoring_weights['fumbles_lost']+
    hist_season_df['rushing_yards']*lambda_scoring_weights['rushing_yds']+hist_season_df['rushing_tds']*lambda_scoring_weights['rushing_td']+
    hist_season_df['passing_yards']*lambda_scoring_weights['passing_yds']+hist_season_df['passing_tds']*lambda_scoring_weights['passing_td']+
    hist_season_df['interceptions']*lambda_scoring_weights['int'] +hist_season_df['special_teams_tds']*lambda_scoring_weights['st_td'] )

# add other id's and position from id_df
merge_id_df = id_df[['gsis_id', 'pfr_id', 'name', 'position']].rename(columns={'gsis_id': 'player_id'})
hist_season_df = hist_season_df.merge(merge_id_df, how='left', on='player_id')
hist_season_df = hist_season_df.loc[hist_season_df['season_type'] == 'REG']
hist_season_df = hist_season_df.loc[season_df['position'].isin(position_list)]

# sum snap stats for players for historical seasons, not including pct because if a player doesn't play,
# they aren't logged in that week which would throw off the season pct
offense_snaps = hist_weekly_df.groupby(['player_id', 'season'])['offense_snaps'].sum()
hist_season_df = hist_season_df.merge(offense_snaps, how='left', on=['player_id', 'season'])

# calculation positional ranks and tiers
hist_season_df['pos_rank'] = hist_season_df.groupby(['position','season'])['lambda_fantasy_points'].rank(method = 'min', ascending = False).astype(int)
hist_season_df['pos_rank_label'] = hist_season_df['position'] + hist_season_df['pos_rank'].astype(str)

hist_season_df['pos_tier'] = hist_season_df['pos_rank'] / pos_tier_size
hist_season_df['pos_tier'] = hist_season_df['pos_tier'].apply(np.ceil).astype(int)
hist_season_df['pos_tier_label'] = hist_season_df['position'] + hist_season_df['pos_tier'].astype(str)

# calculate per-game metrics

for col in per_game_cols:
  column_name = str(col+'/g')
  hist_season_df[column_name] = hist_season_df[col]/hist_season_df['games']
